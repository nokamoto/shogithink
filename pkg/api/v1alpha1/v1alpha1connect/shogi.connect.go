// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1alpha1/shogi.proto

package v1alpha1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"
	v1alpha1 "github.com/nokamoto/shogithink/pkg/api/v1alpha1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ShogiServiceName is the fully-qualified name of the ShogiService service.
	ShogiServiceName = "api.v1alpha1.ShogiService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ShogiServicePosistionProcedure is the fully-qualified name of the ShogiService's Posistion RPC.
	ShogiServicePosistionProcedure = "/api.v1alpha1.ShogiService/Posistion"
	// ShogiServiceThinkProcedure is the fully-qualified name of the ShogiService's Think RPC.
	ShogiServiceThinkProcedure = "/api.v1alpha1.ShogiService/Think"
)

// ShogiServiceClient is a client for the api.v1alpha1.ShogiService service.
type ShogiServiceClient interface {
	Posistion(context.Context, *connect.Request[v1alpha1.PositionRequest]) (*connect.Response[emptypb.Empty], error)
	Think(context.Context, *connect.Request[v1alpha1.ThinkRequest]) (*connect.Response[v1alpha1.BestMove], error)
}

// NewShogiServiceClient constructs a client for the api.v1alpha1.ShogiService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewShogiServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ShogiServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	shogiServiceMethods := v1alpha1.File_api_v1alpha1_shogi_proto.Services().ByName("ShogiService").Methods()
	return &shogiServiceClient{
		posistion: connect.NewClient[v1alpha1.PositionRequest, emptypb.Empty](
			httpClient,
			baseURL+ShogiServicePosistionProcedure,
			connect.WithSchema(shogiServiceMethods.ByName("Posistion")),
			connect.WithClientOptions(opts...),
		),
		think: connect.NewClient[v1alpha1.ThinkRequest, v1alpha1.BestMove](
			httpClient,
			baseURL+ShogiServiceThinkProcedure,
			connect.WithSchema(shogiServiceMethods.ByName("Think")),
			connect.WithClientOptions(opts...),
		),
	}
}

// shogiServiceClient implements ShogiServiceClient.
type shogiServiceClient struct {
	posistion *connect.Client[v1alpha1.PositionRequest, emptypb.Empty]
	think     *connect.Client[v1alpha1.ThinkRequest, v1alpha1.BestMove]
}

// Posistion calls api.v1alpha1.ShogiService.Posistion.
func (c *shogiServiceClient) Posistion(ctx context.Context, req *connect.Request[v1alpha1.PositionRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.posistion.CallUnary(ctx, req)
}

// Think calls api.v1alpha1.ShogiService.Think.
func (c *shogiServiceClient) Think(ctx context.Context, req *connect.Request[v1alpha1.ThinkRequest]) (*connect.Response[v1alpha1.BestMove], error) {
	return c.think.CallUnary(ctx, req)
}

// ShogiServiceHandler is an implementation of the api.v1alpha1.ShogiService service.
type ShogiServiceHandler interface {
	Posistion(context.Context, *connect.Request[v1alpha1.PositionRequest]) (*connect.Response[emptypb.Empty], error)
	Think(context.Context, *connect.Request[v1alpha1.ThinkRequest]) (*connect.Response[v1alpha1.BestMove], error)
}

// NewShogiServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewShogiServiceHandler(svc ShogiServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	shogiServiceMethods := v1alpha1.File_api_v1alpha1_shogi_proto.Services().ByName("ShogiService").Methods()
	shogiServicePosistionHandler := connect.NewUnaryHandler(
		ShogiServicePosistionProcedure,
		svc.Posistion,
		connect.WithSchema(shogiServiceMethods.ByName("Posistion")),
		connect.WithHandlerOptions(opts...),
	)
	shogiServiceThinkHandler := connect.NewUnaryHandler(
		ShogiServiceThinkProcedure,
		svc.Think,
		connect.WithSchema(shogiServiceMethods.ByName("Think")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1alpha1.ShogiService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ShogiServicePosistionProcedure:
			shogiServicePosistionHandler.ServeHTTP(w, r)
		case ShogiServiceThinkProcedure:
			shogiServiceThinkHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedShogiServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedShogiServiceHandler struct{}

func (UnimplementedShogiServiceHandler) Posistion(context.Context, *connect.Request[v1alpha1.PositionRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1alpha1.ShogiService.Posistion is not implemented"))
}

func (UnimplementedShogiServiceHandler) Think(context.Context, *connect.Request[v1alpha1.ThinkRequest]) (*connect.Response[v1alpha1.BestMove], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1alpha1.ShogiService.Think is not implemented"))
}
